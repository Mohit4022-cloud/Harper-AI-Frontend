name: API Health Monitor

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install chromium
    
    - name: Set environment URL
      run: |
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "API_BASE_URL=https://harper-ai-staging.onrender.com" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.environment }}" = "development" ]; then
          echo "API_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
        else
          echo "API_BASE_URL=https://harper-ai-frontend.onrender.com" >> $GITHUB_ENV
        fi
    
    - name: Run API monitor
      run: npx ts-node scripts/api-monitor.ts
      env:
        API_AUTH_TOKEN: ${{ secrets.API_MONITOR_TOKEN }}
      continue-on-error: true
    
    - name: Upload monitoring results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: monitoring-results-${{ github.run_id }}
        path: monitoring-results/
        retention-days: 30
    
    - name: Parse results for notification
      id: parse-results
      if: always()
      run: |
        if [ -f "monitoring-results/latest.json" ]; then
          TOTAL=$(jq '.summary.total' monitoring-results/latest.json)
          FAILED=$(jq '.summary.failed' monitoring-results/latest.json)
          AVG_TIME=$(jq '.summary.avgResponseTime' monitoring-results/latest.json)
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "avg_time=$AVG_TIME" >> $GITHUB_OUTPUT
          
          if [ "$FAILED" -gt 0 ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            FAILED_ENDPOINTS=$(jq -r '.results[] | select(.success == false) | .endpoint' monitoring-results/latest.json | tr '\n' ', ')
            echo "failed_endpoints=$FAILED_ENDPOINTS" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=error" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Slack notification on failure
      if: steps.parse-results.outputs.status == 'failure'
      uses: slackapi/slack-github-action@v1.24.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload: |
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "ðŸš¨ API Health Check Failed",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n${{ github.event.inputs.environment || 'production' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Failed Checks:*\n${{ steps.parse-results.outputs.failed }} / ${{ steps.parse-results.outputs.total }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Avg Response Time:*\n${{ steps.parse-results.outputs.avg_time }}ms"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Time:*\n<!date^${{ github.event.repository.updated_at }}^{date_pretty} at {time}|${{ github.event.repository.updated_at }}>"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Failed Endpoints:*\n${{ steps.parse-results.outputs.failed_endpoints }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Results",
                      "emoji": true
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
    
    - name: Create issue on repeated failures
      if: steps.parse-results.outputs.status == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          // Check if there's already an open issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'api-health,automated'
          });
          
          if (issues.data.length === 0) {
            // Create new issue
            const failedEndpoints = '${{ steps.parse-results.outputs.failed_endpoints }}';
            const issueBody = `## API Health Check Failed
            
            The automated API health check has detected failures.
            
            **Environment:** ${{ github.event.inputs.environment || 'production' }}
            **Failed Endpoints:** ${failedEndpoints}
            **Total Checks:** ${{ steps.parse-results.outputs.total }}
            **Failed Checks:** ${{ steps.parse-results.outputs.failed }}
            **Average Response Time:** ${{ steps.parse-results.outputs.avg_time }}ms
            
            [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Next Steps
            1. Check the failed endpoints for errors
            2. Review server logs
            3. Verify database connectivity
            4. Check for recent deployments
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ API Health Check Failures Detected',
              body: issueBody,
              labels: ['api-health', 'automated', 'bug']
            });
          }
    
    - name: Update status badge
      if: always()
      run: |
        STATUS="${{ steps.parse-results.outputs.status }}"
        if [ "$STATUS" = "success" ]; then
          COLOR="brightgreen"
          MESSAGE="passing"
        elif [ "$STATUS" = "failure" ]; then
          COLOR="red"
          MESSAGE="failing"
        else
          COLOR="yellow"
          MESSAGE="error"
        fi
        
        # Create status badge JSON
        echo "{\"schemaVersion\": 1, \"label\": \"API Health\", \"message\": \"$MESSAGE\", \"color\": \"$COLOR\"}" > api-health-badge.json
        
    - name: Upload badge
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-health-badge
        path: api-health-badge.json
        retention-days: 1

  # Run on staging before production
  monitor-staging:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install chromium
    
    - name: Run API monitor on staging
      run: npx ts-node scripts/api-monitor.ts
      env:
        API_BASE_URL: https://harper-ai-staging.onrender.com
        API_AUTH_TOKEN: ${{ secrets.API_MONITOR_TOKEN }}
      continue-on-error: true
    
    - name: Check staging results
      id: staging-check
      run: |
        if [ -f "monitoring-results/latest.json" ]; then
          FAILED=$(jq '.summary.failed' monitoring-results/latest.json)
          if [ "$FAILED" -gt 0 ]; then
            echo "Staging has failures, skipping production check"
            echo "skip_production=true" >> $GITHUB_OUTPUT
          fi
        fi